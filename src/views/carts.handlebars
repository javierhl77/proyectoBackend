



<div>
    {{>header}}
</div>
<h1 class="text-center">Carrito de Compras</h1>

<div class="container">
    {{#each productos}}
    <div class="card mb-3">
        <div class="card-body">
            <h5 class="card-title">Producto: {{this.product.title}}</h5>
            <div class="d-flex align-items-center">
                <p class="card-text me-2">Cantidad:</p>
                <input type="number" class="form-control quantity-input" value="{{this.quantity}}" min="1" data-product-id="{{this.product._id}}" style="max-width: 80px;">
                <button onclick="actualizarCantidad('{{this.cartId}}', '{{this.product._id}}')" class="btn btn-primary ms-2">Actualizar</button>
            </div>
            <p class="card-text">Precio: ${{this.product.totalPrice}}</p>
            <button onclick="eliminarProducto('{{this.cartId}}', '{{this.product._id}}')" class="btn btn-danger">Eliminar</button>
        </div>
    </div>
    {{/each}}
</div>

<button onclick="vaciarCarrito('{{cartId}}')" class="btn btn-danger">Vaciar Carrito</button>
<h3 class="mt-2">Total de la compra: ${{totalCompra}}</h3>

{{!-- <button onclick="finalizarCompra('{{this.cartId}}')" class="btn btn-success">Finalizar Compra</button> --}}

<form method="post" action="/api/carts/{{cartId}}/purchase">
    <button type="submit" class="btn btn-success">Finalizar Compra</button>
</form>
<a href="/products">seguir comprando</a>

{{!-- Organizar en un módulo en PUBLIC/JS --}}
<script>
    function eliminarProducto(cartId, productId) {
        fetch(`/api/carts/${cartId}/product/${productId}`, {
            method: 'DELETE'
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error al eliminar el producto del carrito');
                }
                location.reload();
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    function vaciarCarrito(cartId) {
        fetch(`/api/carts/${cartId}`, {
            method: 'DELETE'
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error al vaciar el carrito');
                }
                location.reload();
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

    function actualizarCantidad(cartId, productId) {
        const quantityInput = document.querySelector(`[data-product-id="${productId}"]`);
        const newQuantity = parseInt(quantityInput.value);

        fetch(`/api/carts/${cartId}/product/${productId}`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ quantity: newQuantity })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error al actualizar la cantidad del producto');
                }
                location.reload();
            })
            .catch(error => {
                console.error('Error:', error);
            });
    }

   {{!--   function finalizarCompra(cartId) {
        fetch(`/api/carts/${cartId}/purchase`, {
            method: 'POST'
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Error al finalizar la compra');
                }
                // Redirigir al usuario a la página de confirmación de pedido o mostrar un mensaje de éxito
                alert('¡Compra finalizada con éxito!');
            })
            .catch(error => {
                console.error('Error:', error);
            }); 
    }  --}}


</script>
